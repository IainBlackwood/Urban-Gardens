@using GridMvc.Html
@using AcleUrbanGardens.Web.Helpers
@using AcleUrbanGardens.Domain
@model AcleUrbanGardens.Web.Models.DetailsCategoryViewModel

@{
    ViewBag.Title = Model.Category.Name + " Detail";
    ViewBag.CreateProductMessage = "Create a new " + Model.Category.Name + " product";
}

<script>
  $( function() {
    $( "#accordion" ).accordion({
      collapsible: true,
      active: false
    });
  });
</script>

@helper RenderProducts(List<Product> products)
{
    if(products.Count() > 0)
    {
        <div class="dropdown">
            <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
                <b>@products.First().Name</b>
                <span class="caret"></span>
            </button>

            <ul class="dropdown-menu">

                @{
                    foreach (var product in products)
                    {
                        <li>@Html.ActionLink(product.Name, "Details", "Product", new { Id = product.Id }, new { @class = "btn btn-primary" })</li>
                    }
                }
            </ul>
        </div>
    }
    else
    {
        @Html.ActionLink("Create new " + Model.Category.Name + " product", "Create", "Product", new { categroyId = Model.Category.Id }, new { @class = "btn btn-primary" })
    }
}

<div class="row">
    <div class="col-lg-2 col-md-2 col-sm-2">
        @* TODO: add category tree view explorer *@
    </div>
    <div class="col-lg-6 col-md-7 col-sm-6">
        <div id="CategoryDetail">
            <h2>@ViewBag.Title</h2>
            <div>
                @{  if (Model.Parent != null)
                    {
                        <div>
                            <h3>@Model.Category.Name is a sub-category of: @Model.Parent.Name</h3>
                        </div>
                    }
                }
                <dl class="dl-horizontal">
                    <dt>
                        @Html.DisplayNameFor(model => model.Category.Name)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Category.Name)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Category.Description)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Category.Description)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.CreatedByUsername)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.CreatedByUsername)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Category.CreateDate)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Category.CreateDate)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.UpdatedByUsername)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.UpdatedByUsername)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Category.UpdateDate)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Category.UpdateDate)
                    </dd>

                </dl>
                <p>
                    @Html.ActionLink("Edit", "Edit", "Category", new { id = Model.Category.Id }, new { @class = "btn btn-primary" })
                    @Html.ActionLink("Back to List", "Index", "Category", new { @class = "btn btn-primary" })
                    @Html.ActionLink("Delete", "Delete", "Category", new { id = Model.Category.Id }, new { @class = "btn btn-primary" })
                    @{  if (Model.Parent != null)
                        {
                            @Html.ActionLink("Back to " + Model.Parent.Name, "Details", "Category", new { id = Model.Parent.Id }, new { @class = "btn btn-primary" })
                        }
                    }
                </p>
            </div>
        </div>
        <hr />
        <div id="subcategories">
            <p>The Category <b>@Model.Category.Name</b> has the following Sub-Categories</p>
            <div>
                @Html.Grid(Model.Category.Children).Columns(columns =>
                {
                    /* Adding "Name" column: */
                    columns.Add(sc => sc.Name)
                            .Encoded(false)
                            .Sanitized(false)
                            .Titled("Name")
                            .RenderValueAs(sc =>
                            @<b>
                                @Html.ActionLink(sc.Name, "Details", "Category", new { sc.Id }, new { @class = "btn btn-primary" })
                            </b>);

                   /* Adding "Short Description" column: */
                   columns.Add(sc => sc.Description)
                           .Filterable(true)
                           .Titled("Description");

                   /* Adding "image" column: */
                   columns.Add(sc => sc.ImagePath)
                       .Encoded(false)
                       .Sanitized(false)
                       .Titled("Image")
                       .RenderValueAs(sc =>
                            @Html.ActionImage("Details", "Category", new { sc.Id }, "~/Content/Images/" + sc.ImagePath, "Details", "200px", "40px")
                       );

                   /* Adding "IsDeleted" column: */
                   columns.Add(c => c.IsDeleted)
                       .Titled("Is Deleted")
                       .Encoded(false)
                       .Sanitized(false)
                       .SetWidth(40)
                       .RenderValueAs(o => Html.CheckBox("checked", false));

                   /* Adding not mapped column, that renders body, using inline Razor html helper */
                   columns.Add()
                           .Encoded(false)
                           .Sanitized(false)
                           .RenderValueAs(c =>
                                        @<b>
                                            @Html.ActionLink("Create " + c.Name + " Sub-Category", "CreateSubCategory", "Category", new { categoryId = c.Id }, new { @class = "btn btn-primary" })
                                        </b>);

                }).SetRowCssClasses(item => item.IsDeleted ? "warning" : string.Empty).WithPaging(0).Sortable().Filterable().WithMultipleFilters().Selectable(false)
            </div>
        </div>
        <hr />
        <div id="Products">
            <p>Products that are included in the <b>@Model.Category.Name</b> Category</p>
            <div>
                @Html.Grid(Model.Category.Products).Columns(columns =>
                {
                    /* Adding "Name" column: */
                    columns.Add(p => p.Name)
                            .Encoded(false)
                            .Sanitized(false)
                            .Titled("Name")
                            .RenderValueAs(p =>
                            @<b>
                                @Html.ActionLink(p.Name, "Details", "Product", new { p.Id }, new { @class = "btn btn-primary" })
                            </b>);

                /* Adding "Short Description" column: */
                columns.Add(p => p.ShortDescription)
                        .Filterable(true)
                        .Titled("Description");

                /* Adding "image" column: */
                columns.Add(p => p.ImagePath)
                    .Encoded(false)
                    .Sanitized(false)
                    .Titled("Image")
                    .RenderValueAs(p =>
                         @Html.ActionImage("Details", "Product", new { p.Id }, "~/Content/Images/" + p.ImagePath, "Details", "200px", "40px")
                    );

                /* Adding "IsDeleted" column: */
                columns.Add(c => c.IsDeleted)
                    .Titled("Is Deleted")
                    .Encoded(false)
                    .Sanitized(false)
                    .SetWidth(40)
                    .RenderValueAs(o => Html.CheckBox("checked", false));

                /* Adding not mapped column, that renders body, using inline Razor html helper */
                columns.Add()
                        .Encoded(false)
                        .Sanitized(false)
                        .RenderValueAs(c =>
                            @<b>
                                @Html.ActionLink("Create " + c.Name + " Sub-Category", "CreateSubCategory", "Category", new { categoryId = c.Id }, new { @class = "btn btn-primary" })
                            </b>);

                }).SetRowCssClasses(item => item.IsDeleted ? "warning" : string.Empty).WithPaging(5).Sortable().Filterable().WithMultipleFilters().Selectable(false)
            </div>
        </div>
    </div>
    <div class="col-lg-2 col-md-3 col-sm-2">
        @* TODO Add some action links and thinks for quick admin tasks  *@
    </div>
</div>