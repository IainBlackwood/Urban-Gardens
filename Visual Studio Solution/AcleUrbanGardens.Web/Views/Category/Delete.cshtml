@using GridMvc.Html
@using AcleUrbanGardens.Web.Helpers

@model AcleUrbanGardens.Web.Models.DeleteCategoryViewModel

@{
    ViewBag.Title = Model.Category.Name;
}
<div class="container" id="Delete">
    <div class="row">
        <div class="col-lg-2 col-md-2 col-sm-2">
            <div id="categoryTreeView" class="jumbotron container-fluid" style="box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);">
                <p>Category tree view</p>
                @RenderCategoryTreeView()
            </div>
        </div>
        <div class="col-lg-10 col-md-10 col-sm-10">
            <div class="container">
                <br />
                <div id="categorydetail" class="jumbotron container-fluid" style="box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);">
                    <h2>Delete @ViewBag.Title</h2>
                    @RenderCategoryDeleteDetail()
                </div>
                <div id="subcategories" class="panel-group">
                    @RenderProducts()
                </div>
                <div id="products" class="panel-group">
                    @RenderSubCategories()
                </div>
            </div>
        </div>
    </div>
</div>

@helper RenderCategoryTreeView()
{
    <p>TODO: create the tree view!</p>
}

@helper RenderCategoryDeleteDetail()
{
    <h3>Are you sure you want to delete this?</h3>
    if (Model.Parent != null)
    {
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12">
                    <h2>@Model.Category.Name is a sub-category of: @Model.Parent.Name</h2>
                </div>
            </div>
    }

    <div class="row">
        <div class="col-lg-7 col-md-7 col-sm-7">
            <div class="row">
                <dl class="dl-horizontal">
                    <dt>
                        @Html.DisplayNameFor(model => model.Category.Name)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Category.Name)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Category.Description)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Category.Description)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Category.ImagePath)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Category.ImagePath)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.CreatedByUsername)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.CreatedByUsername)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Category.CreateDate)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Category.CreateDate)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.UpdatedByUsername)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.UpdatedByUsername)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Category.UpdateDate)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.Category.UpdateDate)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.Category.IsDeleted)
                    </dt>

                    <dd>
                        @Html.EditorFor(model => model.Category.IsDeleted, new { htmlAttributes = new { @class = "form-control", disabled = "disabled", align = "left" } })
                    </dd>
                </dl>
            </div>
        </div>
        <div class="col-lg-5 col-md-5 col-sm-5">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12">
                    <img src="~/Content/Images/@Model.Category.ImagePath" alt="@Model.Category.ImagePath" width="80%" height="80%"/>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-10 col-md-10 col-sm-10">
            <p class="text-warning">If you delete the category @Model.Category.Name, the products and sub-categories below will be moved to the @Model.UnassignedCategory category.</p>
            @RenderReturnLinks()
        </div>
    </div>
}

@helper RenderProducts()
{
    <div class="panel panel-primary" style="box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);">
        <div class="panel-heading">
            <!--If there are products-->
            @{  if (Model.Category.Children.Count > 0)
                {
                    <p>The following products are linked to the category <b>@Model.Category.Name</b></p>
                }
                else
                {
                    <p>The Category <b>@Model.Category.Name</b> contains no products</p>
                }
            }
        </div>
        <div class="panel-body">
            <div>
                <div class="row">
                    <div class="col-lg-6 col-md-6 col-sm-6">
                        @using (Html.BeginForm("Index", "Category", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            <div class="dropdown">
                                <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
                                    @{
                                        if (Model.ProductRowsPerCategory == 0)
                                        {
                                            <b>Display All Records</b>
                                        }
                                        else
                                        {
                                            <b>Display @Model.ProductRowsPerCategory Records</b>
                                        }
                                    }
                                    <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu">
                                    @{
                                        foreach (var option in Model.RowOptions)
                                        {
                                            <li>@Html.ActionLink("Display " + option.Key, null, null, new { Id = Model.Category.Id, subCatNumRows = Model.SubCategoryRowsPerCategory, prodNumRows = option.Value }, new { @class = "btn btn-primary btn-sm" })</li>
                                        }
                                    }
                                </ul>
                            </div>
                                        }
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6" style="text-align: right">
                        @*@Html.ActionLink("Create " + Model.Category.Name + " Product", "Create", "Product", new { categoryId = Model.Category.Id }, new { @class = "btn btn-primary btn-sm", title = "Create " + Model.Category.Name + " Product" })*@
                    </div>
                </div>
            </div>
            <div>
                @Html.Grid(Model.Category.Products).Named("prods").Columns(columns =>
                {
                    /* Adding "Name" column: */
                    columns.Add(p => p.Name)
                            .Encoded(false)
                            .Sanitized(false)
                            .Filterable(true)
                            .Titled("Name");

                    /* Adding "Short Description" column: */
                    columns.Add(p => p.ShortDescription)
                            .Filterable(true)
                            .Titled("Short Description");

                    /* Adding "Short Description" column: */
                    columns.Add(p => p.LongDescription)
                            .Filterable(true)
                            .Titled("Long Description");

                    /* Adding "image" column: */
                    columns.Add(p => p.ImagePath)
                        .Encoded(false)
                        .Sanitized(false)
                        .Titled("Image")
                        .RenderValueAs(p =>
                                @Html.ActionImage("Details", "Product", new { p.Id }, "~/Content/Images/" + p.ImagePath, "Details", "200px", "40px")
                        );

                    /* Adding "IsDeleted" column: */
                    columns.Add(p => p.IsDeleted)
                        .Titled("Is Deleted")
                        .Encoded(false)
                        .Sanitized(false)
                        .SetWidth(40)
                        .RenderValueAs(o => Html.EditorFor(c => o.IsDeleted, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } }));

                }).SetRowCssClasses(item => item.IsDeleted ? "warning" : string.Empty).WithPaging(Model.ProductRowsPerCategory).Sortable().Filterable().WithMultipleFilters().Selectable(false)
            </div>
        </div>
    </div>
}

@helper RenderSubCategories()
{
    @*<div>
        <h3>The Category @Model.Category.Name has the following Sub-Categories</h3>

        @if (Model.Category.Children.Count > 0)
        {
            foreach (var category in Model.Category.Children)
            {
                <div>
                    <h4>
                        @category.Name
                    </h4>
                    <p>Products attached to the Sub-Category</p>
                    <ul>
                        @if (category.Products.Count() > 0)
                        {
                            foreach (var product in category.Products)
                            {
                                <li>@product.Name</li>
                            }
                        }
                        else
                        {
                            <li>There are no Products in the @category.Name sub-category</li>
                        }
                    </ul>
                </div>
            }
        }
        else
        {
            <div>
                <label>There are no sub categories</label>
            </div>
        }

        <p>If you delete the category @Model.Category.Name, the sub-categories and products above will be moved to the @Model.UnassignedCategory category.</p>
    </div>*@

    <div class="panel panel-primary" style="box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);">
        <div class="panel-heading">
            <!--If there are sub categories-->
            @{  if (Model.Category.Children.Count > 0)
                {
                    <p>The following sub-categories are linked to the category <b>@Model.Category.Name</b></p>
                }
                else
                {
                    <p>The Category <b>@Model.Category.Name</b> has no Sub-Categories</p>
                }
            }
        </div>
        <div class="panel-body">
            <div>
                <div class="row">
                    <div class="col-lg-6 col-md-6 col-sm-6">
                        @using (Html.BeginForm("Index", "Category", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            <div class="dropdown">
                                <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
                                    @{
                                        if (Model.SubCategoryRowsPerCategory == 0)
                                        {
                                            <b>Display All Records</b>
                                        }
                                        else
                                        {
                                            <b>Display @Model.SubCategoryRowsPerCategory Records</b>
                                        }
                                    }
                                    <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu">
                                    @{
                                        foreach (var option in Model.RowOptions)
                                        {
                                            <li>@Html.ActionLink("Display " + option.Key, null, null, new { Id = Model.Category.Id, subCatNumRows = option.Value, prodNumRows = Model.ProductRowsPerCategory }, new { @class = "btn btn-primary btn-sm" })</li>
                                        }
                                    }
                                </ul>
                            </div>
                                        }
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6" style="text-align: right">
                        @*@Html.ActionLink("Create " + Model.Category.Name + " Sub-Category", "CreateSubCategory", "Category", new { categoryId = Model.Category.Id }, new { @class = "btn btn-primary btn-sm", title = "Create " + Model.Category.Name + " Sub-Category" })*@
                    </div>
                </div>
            </div>
            <div>
                @Html.Grid(Model.Category.Children).Named("subcats").Columns(columns =>
                {
                    /* Adding "Name" column: */
                    columns.Add(c => c.Name)
                            .Encoded(false)
                            .Sanitized(false)
                            .Filterable(true)
                            .Titled("Name");

                    /* Adding "Short Description" column: */
                    columns.Add(sc => sc.Description)
                            .Filterable(true)
                            .Titled("Description");

                    /* Adding "image" column: */
                    columns.Add(sc => sc.ImagePath)
                        .Encoded(false)
                        .Sanitized(false)
                        .Titled("Image")
                        .RenderValueAs(sc =>
                                @Html.ActionImage("Details", "Category", new { sc.Id }, "~/Content/Images/" + sc.ImagePath, "Details", "200px", "40px")
                        );

                    /* Adding "IsDeleted" column: */
                    columns.Add(c => c.IsDeleted)
                        .Titled("Is Deleted")
                        .Encoded(false)
                        .Sanitized(false)
                        .SetWidth(40)
                        .RenderValueAs(o => Html.EditorFor(c => o.IsDeleted, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } }));

                }).SetRowCssClasses(item => item.IsDeleted ? "warning" : string.Empty).WithPaging(Model.SubCategoryRowsPerCategory).Sortable().Filterable().WithMultipleFilters().Selectable(false)
            </div>
        </div>
    </div>
}

@helper RenderReturnLinks()
{
    <div>
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-actions no-color">
                <input type="submit" value="Delete" class="btn btn-danger btn-sm" />
                @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary btn-sm" })
                @Html.ActionLink("Back to Detail", "Details", new { Id = Model.Category.Id }, new { @class = "btn btn-primary btn-sm" })
            </div>
        }
    </div>
}